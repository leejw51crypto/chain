/* automatically generated by rust-bindgen */

pub const MAX_LENGTH: u32 = 1024;
pub const MAX_STRING_LENGTH: u32 = 512;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Buf {
    pub buf: [::std::os::raw::c_uchar; 512usize],
    pub length: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Buf() {
    assert_eq!(
        ::std::mem::size_of::<Buf>(),
        516usize,
        concat!("Size of: ", stringify!(Buf))
    );
    assert_eq!(
        ::std::mem::align_of::<Buf>(),
        4usize,
        concat!("Alignment of ", stringify!(Buf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Buf>())).buf as *const _ as usize },
        0usize,
        concat!("Offset of field: ", stringify!(Buf), "::", stringify!(buf))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<Buf>())).length as *const _ as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(Buf),
            "::",
            stringify!(length)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ApiResult {
    pub error: ::std::os::raw::c_int,
    pub value: Buf,
}
#[test]
fn bindgen_test_layout_ApiResult() {
    assert_eq!(
        ::std::mem::size_of::<ApiResult>(),
        520usize,
        concat!("Size of: ", stringify!(ApiResult))
    );
    assert_eq!(
        ::std::mem::align_of::<ApiResult>(),
        4usize,
        concat!("Alignment of ", stringify!(ApiResult))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ApiResult>())).error as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ApiResult),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ApiResult>())).value as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ApiResult),
            "::",
            stringify!(value)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct HDWallet {
    pub error: ::std::os::raw::c_int,
    pub name: Buf,
    pub value: Buf,
    pub mnemonics: Buf,
    pub viewkey: Buf,
    pub seed: Buf,
    pub enckey: Buf,
}
#[test]
fn bindgen_test_layout_HDWallet() {
    assert_eq!(
        ::std::mem::size_of::<HDWallet>(),
        3100usize,
        concat!("Size of: ", stringify!(HDWallet))
    );
    assert_eq!(
        ::std::mem::align_of::<HDWallet>(),
        4usize,
        concat!("Alignment of ", stringify!(HDWallet))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HDWallet>())).error as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(HDWallet),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HDWallet>())).name as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(HDWallet),
            "::",
            stringify!(name)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HDWallet>())).value as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(HDWallet),
            "::",
            stringify!(value)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HDWallet>())).mnemonics as *const _ as usize },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(HDWallet),
            "::",
            stringify!(mnemonics)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HDWallet>())).viewkey as *const _ as usize },
        1552usize,
        concat!(
            "Offset of field: ",
            stringify!(HDWallet),
            "::",
            stringify!(viewkey)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HDWallet>())).seed as *const _ as usize },
        2068usize,
        concat!(
            "Offset of field: ",
            stringify!(HDWallet),
            "::",
            stringify!(seed)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<HDWallet>())).enckey as *const _ as usize },
        2584usize,
        concat!(
            "Offset of field: ",
            stringify!(HDWallet),
            "::",
            stringify!(enckey)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ApiContext {
    pub error: ::std::os::raw::c_int,
    pub chain_id: Buf,
    pub server_url: Buf,
    pub storage_folder: Buf,
}
#[test]
fn bindgen_test_layout_ApiContext() {
    assert_eq!(
        ::std::mem::size_of::<ApiContext>(),
        1552usize,
        concat!("Size of: ", stringify!(ApiContext))
    );
    assert_eq!(
        ::std::mem::align_of::<ApiContext>(),
        4usize,
        concat!("Alignment of ", stringify!(ApiContext))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ApiContext>())).error as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ApiContext),
            "::",
            stringify!(error)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ApiContext>())).chain_id as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ApiContext),
            "::",
            stringify!(chain_id)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ApiContext>())).server_url as *const _ as usize },
        520usize,
        concat!(
            "Offset of field: ",
            stringify!(ApiContext),
            "::",
            stringify!(server_url)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<ApiContext>())).storage_folder as *const _ as usize },
        1036usize,
        concat!(
            "Offset of field: ",
            stringify!(ApiContext),
            "::",
            stringify!(storage_folder)
        )
    );
}
extern "C" {
    pub fn initialize(
        chain_id: *const ::std::os::raw::c_char,
        server: *const ::std::os::raw::c_char,
        storage: *const ::std::os::raw::c_char,
    ) -> ApiContext;
}
extern "C" {
    pub fn get_network_id() -> ApiResult;
}
extern "C" {
    pub fn create_hdwallet(
        name: *const ::std::os::raw::c_char,
        passphrase: *const ::std::os::raw::c_char,
    ) -> HDWallet;
}
extern "C" {
    pub fn restore_hdwallet(passpharase: *const ::std::os::raw::c_char) -> HDWallet;
}
extern "C" {
    pub fn make_hdwallet_staking_address(wallet: *mut HDWallet) -> ApiResult;
}
extern "C" {
    pub fn make_hdwallet_transfer_address(wallet: *mut HDWallet) -> ApiResult;
}
extern "C" {
    pub fn print_buf(name: *const ::std::os::raw::c_char, buf: *mut Buf);
}
