use rustls::internal::msgs::codec::Codec;

use mls::{
    keypackage::{Error, DEFAULT_LIFE_TIME},
    KeyPackage,
};
use ra_client::EnclaveCertVerifierConfig;

const IAS_CERT: &[u8] =
    include_bytes!("../../../client-core/src/cipher/AttestationReportSigningCACert.pem");

#[test]
fn verify_keypackage_test_vector_mock() {
    // keypackage_mock.bin is generated by golang implementation
    static VECTOR: &[u8] = include_bytes!("test_vectors/keypackage_mock.bin");
    let kp = <KeyPackage>::read_bytes(VECTOR).expect("decode");
    let cfg = EnclaveCertVerifierConfig {
        signing_ca_cert_pem: IAS_CERT.into(),
        valid_enclave_quote_statuses: vec!["OK".into()].into(),
        report_validity_secs: 86400,
        enclave_info: None,
    };
    assert!(matches!(kp.verify(cfg, 0), Err(Error::InvalidCredential)));
}

#[test]
fn verify_keypackage_test_vector() {
    static VECTOR: &[u8] = include_bytes!("test_vectors/keypackage.bin");

    let kp = <KeyPackage>::read_bytes(VECTOR).expect("decode");
    let cfg = EnclaveCertVerifierConfig {
        signing_ca_cert_pem: IAS_CERT.into(),
        // FIXME GROUP_OUT_OF_DATE is not valid status
        valid_enclave_quote_statuses: vec!["OK".into(), "GROUP_OUT_OF_DATE".into()].into(),
        report_validity_secs: 90 * 24 * 3600, // so the test vector don't expire that fast
        enclave_info: None,
    };
    let now = 1590042554;
    let expire = now + DEFAULT_LIFE_TIME;
    kp.verify(cfg.clone(), now).unwrap();
    assert!(matches!(
        kp.verify(cfg.clone(), expire + 1),
        Err(Error::NotAfter(_))
    ));
}
